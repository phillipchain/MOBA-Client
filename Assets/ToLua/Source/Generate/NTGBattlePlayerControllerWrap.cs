//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NTGBattlePlayerControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NTGBattlePlayerController), typeof(NTGBattleUnitController));
		L.RegFunction("SetVelocity", SetVelocity);
		L.RegFunction("ShootDown", ShootDown);
		L.RegFunction("ShootUp", ShootUp);
		L.RegFunction("SelectTarget", SelectTarget);
		L.RegFunction("AddExp", AddExp);
		L.RegFunction("AddCoin", AddCoin);
		L.RegFunction("LevelUp", LevelUp);
		L.RegFunction("Kill", Kill);
		L.RegFunction("Revive", Revive);
		L.RegFunction("SkillUpgrade", SkillUpgrade);
		L.RegFunction("SkillUpgradeById", SkillUpgradeById);
		L.RegFunction("TargetUnit", TargetUnit);
		L.RegFunction("SmartTarget", SmartTarget);
		L.RegFunction("SkillShoot", SkillShoot);
		L.RegFunction("Hit", Hit);
		L.RegFunction("Respawn", Respawn);
		L.RegFunction("BuyEquip", BuyEquip);
		L.RegFunction("AddEquip", AddEquip);
		L.RegFunction("SellEquip", SellEquip);
		L.RegFunction("RemoveEquip", RemoveEquip);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("voiceController", get_voiceController, set_voiceController);
		L.RegVar("equips", get_equips, set_equips);
		L.RegVar("targetUnit", get_targetUnit, set_targetUnit);
		L.RegVar("roleId", get_roleId, set_roleId);
		L.RegVar("exp", get_exp, set_exp);
		L.RegVar("coin", get_coin, set_coin);
		L.RegVar("skillPoint", get_skillPoint, set_skillPoint);
		L.RegVar("isAI", get_isAI, set_isAI);
		L.RegVar("isRobot", get_isRobot, set_isRobot);
		L.RegVar("aic", get_aic, set_aic);
		L.RegVar("atkType", get_atkType, set_atkType);
		L.RegVar("killSteak", get_killSteak, set_killSteak);
		L.RegVar("deathSteak", get_deathSteak, set_deathSteak);
		L.RegVar("manualRotation", get_manualRotation, set_manualRotation);
		L.RegVar("idleTime", get_idleTime, set_idleTime);
		L.RegVar("movingTime", get_movingTime, set_movingTime);
		L.RegVar("walking", get_walking, set_walking);
		L.RegVar("joystickDirection", get_joystickDirection, set_joystickDirection);
		L.RegVar("recentTargetedMobs", get_recentTargetedMobs, set_recentTargetedMobs);
		L.RegVar("recentTargetedPlayers", get_recentTargetedPlayers, set_recentTargetedPlayers);
		L.RegVar("reviveCountDown", get_reviveCountDown, set_reviveCountDown);
		L.RegVar("expCap", get_expCap, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVelocity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetVelocity(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShootDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			obj.ShootDown();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShootUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			obj.ShootUp();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SelectTarget(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddExp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.AddExp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCoin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.AddCoin(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LevelUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.LevelUp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Kill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			NTGBattleUnitController arg0 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitController));
			obj.Kill(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Revive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			NTGBattleUnitController arg0 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitController));
			obj.Revive(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SkillUpgrade(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SkillUpgrade(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SkillUpgradeById(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SkillUpgradeById(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TargetUnit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			NTGBattleUnitController arg0 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitController));
			obj.TargetUnit(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SmartTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			NTGBattleSkillController arg0 = (NTGBattleSkillController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleSkillController));
			NTGBattleUnitController o = obj.SmartTarget(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SkillShoot(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(NTGBattlePlayerController), typeof(int), typeof(float), typeof(float)))
			{
				NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.SkillShoot(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(NTGBattlePlayerController), typeof(int), typeof(string), typeof(float), typeof(float)))
			{
				NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.SkillShoot(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NTGBattlePlayerController.SkillShoot");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Hit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			NTGBattleUnitController arg0 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitController));
			NTGBattleSkillBehaviour arg1 = (NTGBattleSkillBehaviour)ToLua.CheckUnityObject(L, 3, typeof(NTGBattleSkillBehaviour));
			obj.Hit(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Respawn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			obj.Respawn();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BuyEquip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			string arg0 = ToLua.CheckString(L, 2);
			double arg1 = (double)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.BuyEquip(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEquip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			string arg0 = ToLua.CheckString(L, 2);
			obj.AddEquip(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SellEquip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			string arg0 = ToLua.CheckString(L, 2);
			double arg1 = (double)LuaDLL.luaL_checknumber(L, 3);
			bool o = obj.SellEquip(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEquip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)ToLua.CheckObject(L, 1, typeof(NTGBattlePlayerController));
			string arg0 = ToLua.CheckString(L, 2);
			obj.RemoveEquip(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_voiceController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			UTGBattlePlayerVoiceController ret = obj.voiceController;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index voiceController on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_equips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.ArrayList ret = obj.equips;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index equips on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetUnit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			NTGBattleUnitController ret = obj.targetUnit;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index targetUnit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_roleId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			int ret = obj.roleId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index roleId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_exp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float ret = obj.exp;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index exp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_coin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float ret = obj.coin;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index coin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skillPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			int ret = obj.skillPoint;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index skillPoint on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isAI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			bool ret = obj.isAI;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isAI on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isRobot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			bool ret = obj.isRobot;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isRobot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_aic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			UTGBattlePlayerAIController ret = obj.aic;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index aic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_atkType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			int ret = obj.atkType;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index atkType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_killSteak(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.Queue ret = obj.killSteak;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index killSteak on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deathSteak(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.Queue ret = obj.deathSteak;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index deathSteak on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_manualRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			bool ret = obj.manualRotation;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index manualRotation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_idleTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float ret = obj.idleTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index idleTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_movingTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float ret = obj.movingTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index movingTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_walking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			bool ret = obj.walking;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index walking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_joystickDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			UnityEngine.Vector3 ret = obj.joystickDirection;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index joystickDirection on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_recentTargetedMobs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.ArrayList ret = obj.recentTargetedMobs;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index recentTargetedMobs on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_recentTargetedPlayers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.ArrayList ret = obj.recentTargetedPlayers;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index recentTargetedPlayers on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_reviveCountDown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float ret = obj.reviveCountDown;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index reviveCountDown on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_expCap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float ret = obj.expCap;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index expCap on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_voiceController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			UTGBattlePlayerVoiceController arg0 = (UTGBattlePlayerVoiceController)ToLua.CheckUnityObject(L, 2, typeof(UTGBattlePlayerVoiceController));
			obj.voiceController = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index voiceController on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_equips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.ArrayList arg0 = (System.Collections.ArrayList)ToLua.CheckObject(L, 2, typeof(System.Collections.ArrayList));
			obj.equips = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index equips on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_targetUnit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			NTGBattleUnitController arg0 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitController));
			obj.targetUnit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index targetUnit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_roleId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.roleId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index roleId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_exp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.exp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index exp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_coin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.coin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index coin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skillPoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.skillPoint = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index skillPoint on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isAI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isAI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isAI on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isRobot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isRobot = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isRobot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_aic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			UTGBattlePlayerAIController arg0 = (UTGBattlePlayerAIController)ToLua.CheckUnityObject(L, 2, typeof(UTGBattlePlayerAIController));
			obj.aic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index aic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_atkType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.atkType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index atkType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_killSteak(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.Queue arg0 = (System.Collections.Queue)ToLua.CheckObject(L, 2, typeof(System.Collections.Queue));
			obj.killSteak = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index killSteak on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_deathSteak(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.Queue arg0 = (System.Collections.Queue)ToLua.CheckObject(L, 2, typeof(System.Collections.Queue));
			obj.deathSteak = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index deathSteak on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_manualRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.manualRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index manualRotation on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_idleTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.idleTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index idleTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_movingTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.movingTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index movingTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_walking(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.walking = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index walking on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_joystickDirection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.joystickDirection = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index joystickDirection on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_recentTargetedMobs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.ArrayList arg0 = (System.Collections.ArrayList)ToLua.CheckObject(L, 2, typeof(System.Collections.ArrayList));
			obj.recentTargetedMobs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index recentTargetedMobs on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_recentTargetedPlayers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			System.Collections.ArrayList arg0 = (System.Collections.ArrayList)ToLua.CheckObject(L, 2, typeof(System.Collections.ArrayList));
			obj.recentTargetedPlayers = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index recentTargetedPlayers on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_reviveCountDown(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattlePlayerController obj = (NTGBattlePlayerController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.reviveCountDown = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index reviveCountDown on a nil value" : e.Message);
		}
	}
}

