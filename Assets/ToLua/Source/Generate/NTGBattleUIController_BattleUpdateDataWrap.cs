//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NTGBattleUIController_BattleUpdateDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NTGBattleUIController.BattleUpdateData), typeof(System.Object));
		L.RegFunction("New", _CreateNTGBattleUIController_BattleUpdateData);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("GameDuration", get_GameDuration, set_GameDuration);
		L.RegVar("FPS", get_FPS, set_FPS);
		L.RegVar("TeamKill", get_TeamKill, set_TeamKill);
		L.RegVar("EnemyTeamKill", get_EnemyTeamKill, set_EnemyTeamKill);
		L.RegVar("PersonKill", get_PersonKill, set_PersonKill);
		L.RegVar("PersonDead", get_PersonDead, set_PersonDead);
		L.RegVar("PersonAssists", get_PersonAssists, set_PersonAssists);
		L.RegVar("Coin", get_Coin, set_Coin);
		L.RegVar("NetworkLatency", get_NetworkLatency, set_NetworkLatency);
		L.RegVar("TargetActive", get_TargetActive, set_TargetActive);
		L.RegVar("TargetIcon", get_TargetIcon, set_TargetIcon);
		L.RegVar("TargetHp", get_TargetHp, set_TargetHp);
		L.RegVar("TargetHpMax", get_TargetHpMax, set_TargetHpMax);
		L.RegVar("TargetMp", get_TargetMp, set_TargetMp);
		L.RegVar("TargetMpMax", get_TargetMpMax, set_TargetMpMax);
		L.RegVar("TargetPAtk", get_TargetPAtk, set_TargetPAtk);
		L.RegVar("TargetMAtk", get_TargetMAtk, set_TargetMAtk);
		L.RegVar("TargetPDef", get_TargetPDef, set_TargetPDef);
		L.RegVar("TargetMDef", get_TargetMDef, set_TargetMDef);
		L.RegVar("Player", get_Player, set_Player);
		L.RegVar("SkillDatas", get_SkillDatas, set_SkillDatas);
		L.RegVar("Ally", get_Ally, set_Ally);
		L.RegVar("Enemy", get_Enemy, set_Enemy);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNTGBattleUIController_BattleUpdateData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NTGBattleUIController.BattleUpdateData obj = new NTGBattleUIController.BattleUpdateData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NTGBattleUIController.BattleUpdateData.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.GameDuration;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameDuration on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FPS(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.FPS;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FPS on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TeamKill(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.TeamKill;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TeamKill on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnemyTeamKill(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.EnemyTeamKill;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnemyTeamKill on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PersonKill(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.PersonKill;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PersonKill on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PersonDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.PersonDead;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PersonDead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PersonAssists(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.PersonAssists;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PersonAssists on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Coin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.Coin;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Coin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetworkLatency(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.NetworkLatency;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NetworkLatency on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetActive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			bool ret = obj.TargetActive;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetActive on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetIcon(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string ret = obj.TargetIcon;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetIcon on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetHp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float ret = obj.TargetHp;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetHp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetHpMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float ret = obj.TargetHpMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetHpMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetMp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float ret = obj.TargetMp;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetMp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetMpMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float ret = obj.TargetMpMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetMpMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetPAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float ret = obj.TargetPAtk;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetPAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetMAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float ret = obj.TargetMAtk;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetMAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetPDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float ret = obj.TargetPDef;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetPDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TargetMDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float ret = obj.TargetMDef;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetMDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Player(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			NTGBattlePlayerController ret = obj.Player;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Player on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SkillDatas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			NTGBattleUIController.BattleUpdateSkillData[] ret = obj.SkillDatas;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SkillDatas on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Ally(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			NTGBattleUIController.BattleUpdatePlayerData[] ret = obj.Ally;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Ally on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Enemy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			NTGBattleUIController.BattleUpdatePlayerData[] ret = obj.Enemy;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Enemy on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.GameDuration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameDuration on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FPS(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.FPS = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FPS on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TeamKill(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.TeamKill = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TeamKill on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnemyTeamKill(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.EnemyTeamKill = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnemyTeamKill on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PersonKill(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.PersonKill = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PersonKill on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PersonDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.PersonDead = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PersonDead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PersonAssists(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.PersonAssists = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PersonAssists on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Coin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Coin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Coin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NetworkLatency(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.NetworkLatency = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NetworkLatency on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetActive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.TargetActive = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetActive on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetIcon(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.TargetIcon = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetIcon on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetHp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TargetHp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetHp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetHpMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TargetHpMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetHpMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetMp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TargetMp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetMp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetMpMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TargetMpMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetMpMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetPAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TargetPAtk = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetPAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetMAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TargetMAtk = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetMAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetPDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TargetPDef = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetPDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TargetMDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TargetMDef = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index TargetMDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Player(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			NTGBattlePlayerController arg0 = (NTGBattlePlayerController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattlePlayerController));
			obj.Player = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Player on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SkillDatas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			NTGBattleUIController.BattleUpdateSkillData[] arg0 = ToLua.CheckObjectArray<NTGBattleUIController.BattleUpdateSkillData>(L, 2);
			obj.SkillDatas = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SkillDatas on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Ally(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			NTGBattleUIController.BattleUpdatePlayerData[] arg0 = ToLua.CheckObjectArray<NTGBattleUIController.BattleUpdatePlayerData>(L, 2);
			obj.Ally = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Ally on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Enemy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.BattleUpdateData obj = (NTGBattleUIController.BattleUpdateData)o;
			NTGBattleUIController.BattleUpdatePlayerData[] arg0 = ToLua.CheckObjectArray<NTGBattleUIController.BattleUpdatePlayerData>(L, 2);
			obj.Enemy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Enemy on a nil value" : e.Message);
		}
	}
}

