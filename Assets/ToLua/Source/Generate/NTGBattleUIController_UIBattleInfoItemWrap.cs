//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NTGBattleUIController_UIBattleInfoItemWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NTGBattleUIController.UIBattleInfoItem), typeof(System.Object));
		L.RegFunction("New", _CreateNTGBattleUIController_UIBattleInfoItem);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("RoleId", get_RoleId, set_RoleId);
		L.RegVar("SkinId", get_SkinId, set_SkinId);
		L.RegVar("PlayerName", get_PlayerName, set_PlayerName);
		L.RegVar("ZSkillId", get_ZSkillId, set_ZSkillId);
		L.RegVar("Level", get_Level, set_Level);
		L.RegVar("DeadCount", get_DeadCount, set_DeadCount);
		L.RegVar("CDCount", get_CDCount, set_CDCount);
		L.RegVar("Kill", get_Kill, set_Kill);
		L.RegVar("Dead", get_Dead, set_Dead);
		L.RegVar("Assistant", get_Assistant, set_Assistant);
		L.RegVar("Money", get_Money, set_Money);
		L.RegVar("Hp", get_Hp, set_Hp);
		L.RegVar("PAtk", get_PAtk, set_PAtk);
		L.RegVar("MAtk", get_MAtk, set_MAtk);
		L.RegVar("PDef", get_PDef, set_PDef);
		L.RegVar("MDef", get_MDef, set_MDef);
		L.RegVar("Equips", get_Equips, set_Equips);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNTGBattleUIController_UIBattleInfoItem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NTGBattleUIController.UIBattleInfoItem obj = new NTGBattleUIController.UIBattleInfoItem();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NTGBattleUIController.UIBattleInfoItem.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RoleId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.RoleId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RoleId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SkinId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			string ret = obj.SkinId;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SkinId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PlayerName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			string ret = obj.PlayerName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PlayerName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ZSkillId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.ZSkillId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ZSkillId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.Level;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Level on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DeadCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.DeadCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CDCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.CDCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CDCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Kill(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.Kill;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Kill on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Dead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.Dead;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Dead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Assistant(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.Assistant;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Assistant on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Money(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.Money;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Money on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Hp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.Hp;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Hp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.PAtk;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.MAtk;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.PDef;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int ret = obj.MDef;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Equips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int[] ret = obj.Equips;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Equips on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RoleId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RoleId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RoleId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SkinId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.SkinId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SkinId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PlayerName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.PlayerName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PlayerName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ZSkillId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ZSkillId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ZSkillId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Level = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Level on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DeadCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.DeadCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DeadCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CDCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CDCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CDCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Kill(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Kill = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Kill on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Dead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Dead = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Dead on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Assistant(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Assistant = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Assistant on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Money(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Money = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Money on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Hp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Hp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Hp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.PAtk = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MAtk = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.PDef = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MDef = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Equips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUIController.UIBattleInfoItem obj = (NTGBattleUIController.UIBattleInfoItem)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.Equips = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Equips on a nil value" : e.Message);
		}
	}
}

