//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NTGBattleUnitControllerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NTGBattleUnitController), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("PlayFXOnce", PlayFXOnce);
		L.RegFunction("PlayFX", PlayFX);
		L.RegFunction("StopFX", StopFX);
		L.RegFunction("Lockable", Lockable);
		L.RegFunction("UnitMove", UnitMove);
		L.RegFunction("OnEnable", OnEnable);
		L.RegFunction("Start", Start);
		L.RegFunction("OnDestroy", OnDestroy);
		L.RegFunction("Flash", Flash);
		L.RegFunction("SetTransparent", SetTransparent);
		L.RegFunction("SetVisibility", SetVisibility);
		L.RegFunction("Respawn", Respawn);
		L.RegFunction("LevelUp", LevelUp);
		L.RegFunction("SkillShoot", SkillShoot);
		L.RegFunction("Revive", Revive);
		L.RegFunction("Kill", Kill);
		L.RegFunction("SetStatus", SetStatus);
		L.RegFunction("GetStatus", GetStatus);
		L.RegFunction("SetNavPriority", SetNavPriority);
		L.RegFunction("NotifyAddPassive", NotifyAddPassive);
		L.RegFunction("AddPassive", AddPassive);
		L.RegFunction("NotifyRemovePassive", NotifyRemovePassive);
		L.RegFunction("RemovePassive", RemovePassive);
		L.RegFunction("NotifyShoot", NotifyShoot);
		L.RegFunction("ShootVisible", ShootVisible);
		L.RegFunction("Engage", Engage);
		L.RegFunction("Hit", Hit);
		L.RegFunction("ClientHit", ClientHit);
		L.RegFunction("ServerHit", ServerHit);
		L.RegFunction("FindTarget", FindTarget);
		L.RegFunction("FindSkill", FindSkill);
		L.RegFunction("InitAttrs", InitAttrs);
		L.RegFunction("LoadBaseAttrs", LoadBaseAttrs);
		L.RegFunction("ApplyBaseAttrs", ApplyBaseAttrs);
		L.RegFunction("ValidateAttrs", ValidateAttrs);
		L.RegFunction("AddAttrs", AddAttrs);
		L.RegFunction("MinusAttrs", MinusAttrs);
		L.RegFunction("SyncHitDirect", SyncHitDirect);
		L.RegFunction("SyncAddPassive", SyncAddPassive);
		L.RegFunction("SyncRemovePassive", SyncRemovePassive);
		L.RegFunction("SyncDest", SyncDest);
		L.RegFunction("SyncShoot", SyncShoot);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegConstant("SyncTimeLimit", 0.5);
		L.RegVar("master", get_master, set_master);
		L.RegVar("rendererVisible", get_rendererVisible, set_rendererVisible);
		L.RegVar("visibility", get_visibility, set_visibility);
		L.RegVar("unitRadiusSqr", get_unitRadiusSqr, set_unitRadiusSqr);
		L.RegVar("unitAnimator", get_unitAnimator, set_unitAnimator);
		L.RegVar("unitAnchors", get_unitAnchors, set_unitAnchors);
		L.RegVar("unitRenderers", get_unitRenderers, set_unitRenderers);
		L.RegVar("unitUi", get_unitUi, set_unitUi);
		L.RegVar("unitMinimap", get_unitMinimap, set_unitMinimap);
		L.RegVar("UnitFXResource", get_UnitFXResource, set_UnitFXResource);
		L.RegVar("unitFX", get_unitFX, set_unitFX);
		L.RegVar("unitPersistFX", get_unitPersistFX, set_unitPersistFX);
		L.RegVar("unitActiveFX", get_unitActiveFX, set_unitActiveFX);
		L.RegVar("unitCollider", get_unitCollider, set_unitCollider);
		L.RegVar("id", get_id, set_id);
		L.RegVar("position", get_position, set_position);
		L.RegVar("group", get_group, set_group);
		L.RegVar("name", get_name, set_name);
		L.RegVar("level", get_level, set_level);
		L.RegVar("icon", get_icon, set_icon);
		L.RegVar("alive", get_alive, set_alive);
		L.RegVar("shield", get_shield, set_shield);
		L.RegVar("hp", get_hp, set_hp);
		L.RegVar("hpMax", get_hpMax, set_hpMax);
		L.RegVar("mp", get_mp, set_mp);
		L.RegVar("mpMax", get_mpMax, set_mpMax);
		L.RegVar("hpRecover", get_hpRecover, set_hpRecover);
		L.RegVar("mpRecover", get_mpRecover, set_mpRecover);
		L.RegVar("pAtk", get_pAtk, set_pAtk);
		L.RegVar("mAtk", get_mAtk, set_mAtk);
		L.RegVar("pDef", get_pDef, set_pDef);
		L.RegVar("mDef", get_mDef, set_mDef);
		L.RegVar("pAtkRate", get_pAtkRate, set_pAtkRate);
		L.RegVar("mAtkRate", get_mAtkRate, set_mAtkRate);
		L.RegVar("pPenetrate", get_pPenetrate, set_pPenetrate);
		L.RegVar("mPenetrate", get_mPenetrate, set_mPenetrate);
		L.RegVar("pPenetrateRate", get_pPenetrateRate, set_pPenetrateRate);
		L.RegVar("mPenetrateRate", get_mPenetrateRate, set_mPenetrateRate);
		L.RegVar("crit", get_crit, set_crit);
		L.RegVar("critEffect", get_critEffect, set_critEffect);
		L.RegVar("pHpSteal", get_pHpSteal, set_pHpSteal);
		L.RegVar("mHpSteal", get_mHpSteal, set_mHpSteal);
		L.RegVar("tough", get_tough, set_tough);
		L.RegVar("atkSpeed", get_atkSpeed, set_atkSpeed);
		L.RegVar("cdReduce", get_cdReduce, set_cdReduce);
		L.RegVar("mask", get_mask, set_mask);
		L.RegVar("baseAttrs", get_baseAttrs, set_baseAttrs);
		L.RegVar("sqrTargetRange", get_sqrTargetRange, set_sqrTargetRange);
		L.RegVar("rewardRange", get_rewardRange, set_rewardRange);
		L.RegVar("statistic", get_statistic, set_statistic);
		L.RegVar("interruptSource", get_interruptSource, set_interruptSource);
		L.RegVar("MoveableCount", get_MoveableCount, set_MoveableCount);
		L.RegVar("ShootableCount", get_ShootableCount, set_ShootableCount);
		L.RegVar("GroupVisibleCount", get_GroupVisibleCount, set_GroupVisibleCount);
		L.RegVar("GroupLockableCount", get_GroupLockableCount, set_GroupLockableCount);
		L.RegVar("_status", get__status, set__status);
		L.RegVar("mainController", get_mainController, set_mainController);
		L.RegVar("navAgent", get_navAgent, set_navAgent);
		L.RegVar("skills", get_skills, set_skills);
		L.RegVar("pSkills", get_pSkills, set_pSkills);
		L.RegVar("passivesTransform", get_passivesTransform, set_passivesTransform);
		L.RegVar("passives", get_passives, set_passives);
		L.RegVar("unitBuffs", get_unitBuffs, set_unitBuffs);
		L.RegVar("unitUiAnchor", get_unitUiAnchor, set_unitUiAnchor);
		L.RegVar("randMap", get_randMap, set_randMap);
		L.RegVar("randIndex", get_randIndex, set_randIndex);
		L.RegVar("defaultNavPriority", get_defaultNavPriority, set_defaultNavPriority);
		L.RegVar("viewController", get_viewController, set_viewController);
		L.RegVar("currentPathValid", get_currentPathValid, set_currentPathValid);
		L.RegVar("currentPathCornersCount", get_currentPathCornersCount, set_currentPathCornersCount);
		L.RegVar("currentPathCornerIndex", get_currentPathCornerIndex, set_currentPathCornerIndex);
		L.RegVar("currentCornerMoved", get_currentCornerMoved, set_currentCornerMoved);
		L.RegVar("currentCornerDist", get_currentCornerDist, set_currentCornerDist);
		L.RegVar("NetEventTime", get_NetEventTime, set_NetEventTime);
		L.RegVar("unitShader", get_unitShader, set_unitShader);
		L.RegVar("isEngage", get_isEngage, set_isEngage);
		L.RegVar("engageStartTime", get_engageStartTime, set_engageStartTime);
		L.RegVar("syncTime", get_syncTime, set_syncTime);
		L.RegVar("serverPosition", get_serverPosition, set_serverPosition);
		L.RegVar("serverVelocity", get_serverVelocity, set_serverVelocity);
		L.RegVar("MoveSpeed", get_MoveSpeed, set_MoveSpeed);
		L.RegVar("targetRange", get_targetRange, set_targetRange);
		L.RegVar("Moveable", get_Moveable, null);
		L.RegVar("Shootable", get_Shootable, null);
		L.RegVar("Stealth", get_Stealth, set_Stealth);
		L.RegVar("AntiStealth", get_AntiStealth, set_AntiStealth);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayFXOnce(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController.UnitFX arg0 = (NTGBattleUnitController.UnitFX)ToLua.CheckObject(L, 2, typeof(NTGBattleUnitController.UnitFX));
			obj.PlayFXOnce(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayFX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController.UnitFX arg0 = (NTGBattleUnitController.UnitFX)ToLua.CheckObject(L, 2, typeof(NTGBattleUnitController.UnitFX));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.PlayFX(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopFX(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController.UnitFX arg0 = (NTGBattleUnitController.UnitFX)ToLua.CheckObject(L, 2, typeof(NTGBattleUnitController.UnitFX));
			obj.StopFX(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lockable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.Lockable(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnitMove(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			bool o = obj.UnitMove(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			obj.OnEnable();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			obj.Start();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDestroy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			obj.OnDestroy();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flash(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			obj.Flash();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTransparent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetTransparent(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVisibility(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetVisibility(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Respawn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			obj.Respawn();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LevelUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.LevelUp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SkillShoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.SkillShoot(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Revive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController arg0 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitController));
			obj.Revive(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Kill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController arg0 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitController));
			obj.Kill(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController.UnitStatus arg0 = (NTGBattleUnitController.UnitStatus)ToLua.CheckObject(L, 2, typeof(NTGBattleUnitController.UnitStatus));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetStatus(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStatus(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController.UnitStatus arg0 = (NTGBattleUnitController.UnitStatus)ToLua.CheckObject(L, 2, typeof(NTGBattleUnitController.UnitStatus));
			bool o = obj.GetStatus(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetNavPriority(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController.NavPriority arg0 = (NTGBattleUnitController.NavPriority)ToLua.CheckObject(L, 2, typeof(NTGBattleUnitController.NavPriority));
			obj.SetNavPriority(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NotifyAddPassive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			float[] arg3 = ToLua.CheckNumberArray<float>(L, 5);
			string[] arg4 = ToLua.CheckStringArray(L, 6);
			obj.NotifyAddPassive(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPassive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			string arg0 = ToLua.CheckString(L, 2);
			NTGBattleUnitController arg1 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 3, typeof(NTGBattleUnitController));
			NTGBattleSkillController arg2 = (NTGBattleSkillController)ToLua.CheckUnityObject(L, 4, typeof(NTGBattleSkillController));
			float[] arg3 = ToLua.CheckNumberArray<float>(L, 5);
			string[] arg4 = ToLua.CheckStringArray(L, 6);
			obj.AddPassive(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NotifyRemovePassive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.NotifyRemovePassive(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemovePassive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			string arg0 = ToLua.CheckString(L, 2);
			NTGBattleUnitController arg1 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 3, typeof(NTGBattleUnitController));
			NTGBattleSkillController arg2 = (NTGBattleSkillController)ToLua.CheckUnityObject(L, 4, typeof(NTGBattleSkillController));
			obj.RemovePassive(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NotifyShoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController arg0 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitController));
			NTGBattleSkillController arg1 = (NTGBattleSkillController)ToLua.CheckUnityObject(L, 3, typeof(NTGBattleSkillController));
			obj.NotifyShoot(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShootVisible(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ShootVisible(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Engage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			obj.Engage();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Hit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleUnitController arg0 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitController));
			NTGBattleSkillBehaviour arg1 = (NTGBattleSkillBehaviour)ToLua.CheckUnityObject(L, 3, typeof(NTGBattleSkillBehaviour));
			obj.Hit(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClientHit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NTGBattleSkillBehaviour.EffectType arg1 = (NTGBattleSkillBehaviour.EffectType)ToLua.CheckObject(L, 3, typeof(NTGBattleSkillBehaviour.EffectType));
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			NTGBattleUnitController arg3 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 5, typeof(NTGBattleUnitController));
			NTGBattleSkillBehaviour arg4 = (NTGBattleSkillBehaviour)ToLua.CheckUnityObject(L, 6, typeof(NTGBattleSkillBehaviour));
			obj.ClientHit(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ServerHit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			NTGBattleSkillBehaviour.EffectType arg1 = (NTGBattleSkillBehaviour.EffectType)ToLua.CheckObject(L, 3, typeof(NTGBattleSkillBehaviour.EffectType));
			string arg2 = ToLua.CheckString(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			obj.ServerHit(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindTarget(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 7 && TypeChecker.CheckTypes(L, 1, typeof(NTGBattleUnitController), typeof(float), typeof(bool), typeof(NTGBattleUnitController.TargetCondition), typeof(NTGBattleUnitController.TargetType), typeof(System.Collections.ArrayList), typeof(bool)))
			{
				NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.ToObject(L, 1);
				float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				NTGBattleUnitController.TargetCondition arg2 = (NTGBattleUnitController.TargetCondition)ToLua.ToObject(L, 4);
				NTGBattleUnitController.TargetType arg3 = (NTGBattleUnitController.TargetType)ToLua.ToObject(L, 5);
				System.Collections.ArrayList arg4 = (System.Collections.ArrayList)ToLua.ToObject(L, 6);
				bool arg5 = LuaDLL.lua_toboolean(L, 7);
				NTGBattleUnitController o = obj.FindTarget(arg0, arg1, arg2, arg3, arg4, arg5);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 8 && TypeChecker.CheckTypes(L, 1, typeof(NTGBattleUnitController), typeof(UnityEngine.Vector3), typeof(float), typeof(bool), typeof(NTGBattleUnitController.TargetCondition), typeof(NTGBattleUnitController.TargetType), typeof(System.Collections.ArrayList), typeof(bool)))
			{
				NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.ToObject(L, 1);
				UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				NTGBattleUnitController.TargetCondition arg3 = (NTGBattleUnitController.TargetCondition)ToLua.ToObject(L, 5);
				NTGBattleUnitController.TargetType arg4 = (NTGBattleUnitController.TargetType)ToLua.ToObject(L, 6);
				System.Collections.ArrayList arg5 = (System.Collections.ArrayList)ToLua.ToObject(L, 7);
				bool arg6 = LuaDLL.lua_toboolean(L, 8);
				NTGBattleUnitController o = obj.FindTarget(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NTGBattleUnitController.FindTarget");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindSkill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			NTGBattleSkillController o = obj.FindSkill(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitAttrs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleMemberAttrs arg0 = (NTGBattleMemberAttrs)ToLua.CheckObject(L, 2, typeof(NTGBattleMemberAttrs));
			obj.InitAttrs(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadBaseAttrs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			obj.LoadBaseAttrs();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyBaseAttrs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			obj.ApplyBaseAttrs();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ValidateAttrs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			obj.ValidateAttrs();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAttrs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleMemberAttrs arg0 = (NTGBattleMemberAttrs)ToLua.CheckObject(L, 2, typeof(NTGBattleMemberAttrs));
			obj.AddAttrs(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MinusAttrs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			NTGBattleMemberAttrs arg0 = (NTGBattleMemberAttrs)ToLua.CheckObject(L, 2, typeof(NTGBattleMemberAttrs));
			obj.MinusAttrs(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncHitDirect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			obj.SyncHitDirect(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncAddPassive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			string arg0 = ToLua.CheckString(L, 2);
			NTGBattleUnitController arg1 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 3, typeof(NTGBattleUnitController));
			NTGBattleSkillController arg2 = (NTGBattleSkillController)ToLua.CheckUnityObject(L, 4, typeof(NTGBattleSkillController));
			float[] arg3 = ToLua.CheckNumberArray<float>(L, 5);
			string[] arg4 = ToLua.CheckStringArray(L, 6);
			obj.SyncAddPassive(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncRemovePassive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			string arg0 = ToLua.CheckString(L, 2);
			NTGBattleUnitController arg1 = (NTGBattleUnitController)ToLua.CheckUnityObject(L, 3, typeof(NTGBattleUnitController));
			NTGBattleSkillController arg2 = (NTGBattleSkillController)ToLua.CheckUnityObject(L, 4, typeof(NTGBattleSkillController));
			obj.SyncRemovePassive(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncDest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SyncDest(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncShoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			NTGBattleUnitController obj = (NTGBattleUnitController)ToLua.CheckObject(L, 1, typeof(NTGBattleUnitController));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.SyncShoot(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_master(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool ret = obj.master;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index master on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rendererVisible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool ret = obj.rendererVisible;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rendererVisible on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_visibility(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool ret = obj.visibility;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index visibility on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitRadiusSqr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.unitRadiusSqr;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitRadiusSqr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitAnimator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Animator ret = obj.unitAnimator;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitAnimator on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitAnchors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform[] ret = obj.unitAnchors;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitAnchors on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitRenderers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Renderer[] ret = obj.unitRenderers;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitRenderers on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitUi(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform ret = obj.unitUi;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitUi on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitMinimap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform ret = obj.unitMinimap;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitMinimap on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UnitFXResource(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NTGBattleUnitController.UnitFXResource);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitFX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform[] ret = obj.unitFX;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitFX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitPersistFX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform[] ret = obj.unitPersistFX;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitPersistFX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitActiveFX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			System.Collections.ArrayList ret = obj.unitActiveFX;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitActiveFX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitCollider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.CapsuleCollider ret = obj.unitCollider;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitCollider on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			string ret = obj.id;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index id on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.position;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index position on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_group(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.group;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index group on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			string ret = obj.name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index name on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.level;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index level on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_icon(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			string ret = obj.icon;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index icon on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_alive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool ret = obj.alive;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index alive on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shield(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.shield;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index shield on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.hp;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hpMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.hpMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hpMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.mp;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mpMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.mpMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mpMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hpRecover(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.hpRecover;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hpRecover on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mpRecover(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.mpRecover;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mpRecover on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.pAtk;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.mAtk;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.pDef;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.mDef;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pAtkRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.pAtkRate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pAtkRate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mAtkRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.mAtkRate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mAtkRate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pPenetrate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.pPenetrate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pPenetrate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mPenetrate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.mPenetrate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mPenetrate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pPenetrateRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.pPenetrateRate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pPenetrateRate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mPenetrateRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.mPenetrateRate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mPenetrateRate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_crit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.crit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index crit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_critEffect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.critEffect;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index critEffect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pHpSteal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.pHpSteal;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pHpSteal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mHpSteal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.mHpSteal;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mHpSteal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tough(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.tough;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tough on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_atkSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.atkSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index atkSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cdReduce(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.cdReduce;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cdReduce on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mask(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.mask;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mask on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_baseAttrs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleMemberAttrs ret = obj.baseAttrs;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index baseAttrs on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sqrTargetRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.sqrTargetRange;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sqrTargetRange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rewardRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.rewardRange;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rewardRange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_statistic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleUnitStatistic ret = obj.statistic;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index statistic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_interruptSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleUnitController.ShootInterruptSource ret = obj.interruptSource;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index interruptSource on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MoveableCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.MoveableCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveableCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShootableCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.ShootableCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ShootableCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GroupVisibleCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int[] ret = obj.GroupVisibleCount;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GroupVisibleCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GroupLockableCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int[] ret = obj.GroupLockableCount;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GroupLockableCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool[] ret = obj._status;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index _status on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mainController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleMainController ret = obj.mainController;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mainController on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_navAgent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.NavMeshAgent ret = obj.navAgent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index navAgent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_skills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleSkillController[] ret = obj.skills;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index skills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pSkills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattlePassiveSkillController[] ret = obj.pSkills;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pSkills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_passivesTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform ret = obj.passivesTransform;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index passivesTransform on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_passives(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			System.Collections.ArrayList ret = obj.passives;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index passives on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitBuffs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			System.Collections.ArrayList ret = obj.unitBuffs;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitBuffs on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitUiAnchor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform ret = obj.unitUiAnchor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitUiAnchor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_randMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int[] ret = obj.randMap;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index randMap on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_randIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.randIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index randIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultNavPriority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.defaultNavPriority;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defaultNavPriority on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_viewController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleUnitViewController ret = obj.viewController;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index viewController on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentPathValid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool ret = obj.currentPathValid;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentPathValid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentPathCornersCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.currentPathCornersCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentPathCornersCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentPathCornerIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.currentPathCornerIndex;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentPathCornerIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentCornerMoved(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.currentCornerMoved;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentCornerMoved on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentCornerDist(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.currentCornerDist;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentCornerDist on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetEventTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.NetEventTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NetEventTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unitShader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Shader ret = obj.unitShader;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitShader on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isEngage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool ret = obj.isEngage;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isEngage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_engageStartTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.engageStartTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index engageStartTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_syncTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.syncTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index syncTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Vector3 ret = obj.serverPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Vector3 ret = obj.serverVelocity;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverVelocity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MoveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.MoveSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float ret = obj.targetRange;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index targetRange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Moveable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool ret = obj.Moveable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Moveable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Shootable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool ret = obj.Shootable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Shootable on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Stealth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.Stealth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Stealth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AntiStealth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int ret = obj.AntiStealth;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AntiStealth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_master(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.master = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index master on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rendererVisible(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.rendererVisible = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rendererVisible on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_visibility(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.visibility = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index visibility on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitRadiusSqr(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.unitRadiusSqr = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitRadiusSqr on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitAnimator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Animator arg0 = (UnityEngine.Animator)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Animator));
			obj.unitAnimator = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitAnimator on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitAnchors(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform[] arg0 = ToLua.CheckObjectArray<UnityEngine.Transform>(L, 2);
			obj.unitAnchors = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitAnchors on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitRenderers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Renderer[] arg0 = ToLua.CheckObjectArray<UnityEngine.Renderer>(L, 2);
			obj.unitRenderers = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitRenderers on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitUi(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.unitUi = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitUi on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitMinimap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.unitMinimap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitMinimap on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UnitFXResource(IntPtr L)
	{
		try
		{
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			NTGBattleUnitController.UnitFXResource = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitFX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform[] arg0 = ToLua.CheckObjectArray<UnityEngine.Transform>(L, 2);
			obj.unitFX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitFX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitPersistFX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform[] arg0 = ToLua.CheckObjectArray<UnityEngine.Transform>(L, 2);
			obj.unitPersistFX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitPersistFX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitActiveFX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			System.Collections.ArrayList arg0 = (System.Collections.ArrayList)ToLua.CheckObject(L, 2, typeof(System.Collections.ArrayList));
			obj.unitActiveFX = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitActiveFX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitCollider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.CapsuleCollider arg0 = (UnityEngine.CapsuleCollider)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.CapsuleCollider));
			obj.unitCollider = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitCollider on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.id = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index id on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index position on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_group(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.group = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index group on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.name = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index name on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.level = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index level on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_icon(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.icon = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index icon on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_alive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.alive = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index alive on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shield(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.shield = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index shield on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.hp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hpMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.hpMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hpMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mpMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mpMax = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mpMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_hpRecover(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.hpRecover = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index hpRecover on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mpRecover(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mpRecover = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mpRecover on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.pAtk = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mAtk(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mAtk = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mAtk on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.pDef = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mDef(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mDef = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mDef on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pAtkRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.pAtkRate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pAtkRate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mAtkRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mAtkRate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mAtkRate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pPenetrate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.pPenetrate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pPenetrate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mPenetrate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mPenetrate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mPenetrate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pPenetrateRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.pPenetrateRate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pPenetrateRate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mPenetrateRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mPenetrateRate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mPenetrateRate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_crit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.crit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index crit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_critEffect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.critEffect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index critEffect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pHpSteal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.pHpSteal = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pHpSteal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mHpSteal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mHpSteal = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mHpSteal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tough(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.tough = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index tough on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_atkSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.atkSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index atkSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cdReduce(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.cdReduce = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index cdReduce on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mask(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.mask = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mask on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_baseAttrs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleMemberAttrs arg0 = (NTGBattleMemberAttrs)ToLua.CheckObject(L, 2, typeof(NTGBattleMemberAttrs));
			obj.baseAttrs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index baseAttrs on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sqrTargetRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sqrTargetRange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sqrTargetRange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rewardRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.rewardRange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rewardRange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_statistic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleUnitStatistic arg0 = (NTGBattleUnitStatistic)ToLua.CheckObject(L, 2, typeof(NTGBattleUnitStatistic));
			obj.statistic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index statistic on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_interruptSource(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleUnitController.ShootInterruptSource arg0 = (NTGBattleUnitController.ShootInterruptSource)ToLua.CheckObject(L, 2, typeof(NTGBattleUnitController.ShootInterruptSource));
			obj.interruptSource = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index interruptSource on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MoveableCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MoveableCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveableCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ShootableCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ShootableCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ShootableCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GroupVisibleCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.GroupVisibleCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GroupVisibleCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GroupLockableCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.GroupLockableCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GroupLockableCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool[] arg0 = ToLua.CheckNumberArray<bool>(L, 2);
			obj._status = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index _status on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mainController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleMainController arg0 = (NTGBattleMainController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleMainController));
			obj.mainController = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mainController on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_navAgent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.NavMeshAgent arg0 = (UnityEngine.NavMeshAgent)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.NavMeshAgent));
			obj.navAgent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index navAgent on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_skills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleSkillController[] arg0 = ToLua.CheckObjectArray<NTGBattleSkillController>(L, 2);
			obj.skills = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index skills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pSkills(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattlePassiveSkillController[] arg0 = ToLua.CheckObjectArray<NTGBattlePassiveSkillController>(L, 2);
			obj.pSkills = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pSkills on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_passivesTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.passivesTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index passivesTransform on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_passives(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			System.Collections.ArrayList arg0 = (System.Collections.ArrayList)ToLua.CheckObject(L, 2, typeof(System.Collections.ArrayList));
			obj.passives = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index passives on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitBuffs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			System.Collections.ArrayList arg0 = (System.Collections.ArrayList)ToLua.CheckObject(L, 2, typeof(System.Collections.ArrayList));
			obj.unitBuffs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitBuffs on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitUiAnchor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Transform));
			obj.unitUiAnchor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitUiAnchor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_randMap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int[] arg0 = ToLua.CheckNumberArray<int>(L, 2);
			obj.randMap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index randMap on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_randIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.randIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index randIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultNavPriority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.defaultNavPriority = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index defaultNavPriority on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_viewController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			NTGBattleUnitViewController arg0 = (NTGBattleUnitViewController)ToLua.CheckUnityObject(L, 2, typeof(NTGBattleUnitViewController));
			obj.viewController = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index viewController on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentPathValid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.currentPathValid = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentPathValid on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentPathCornersCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.currentPathCornersCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentPathCornersCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentPathCornerIndex(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.currentPathCornerIndex = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentPathCornerIndex on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentCornerMoved(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.currentCornerMoved = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentCornerMoved on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currentCornerDist(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.currentCornerDist = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index currentCornerDist on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NetEventTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.NetEventTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NetEventTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_unitShader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Shader arg0 = (UnityEngine.Shader)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Shader));
			obj.unitShader = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index unitShader on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isEngage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isEngage = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index isEngage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_engageStartTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.engageStartTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index engageStartTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_syncTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.syncTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index syncTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_serverPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.serverPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverPosition on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_serverVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.serverVelocity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverVelocity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MoveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.MoveSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MoveSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_targetRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.targetRange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index targetRange on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Stealth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Stealth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Stealth on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AntiStealth(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NTGBattleUnitController obj = (NTGBattleUnitController)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AntiStealth = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AntiStealth on a nil value" : e.Message);
		}
	}
}

