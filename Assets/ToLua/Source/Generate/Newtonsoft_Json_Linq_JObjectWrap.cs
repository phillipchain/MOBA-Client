//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Newtonsoft_Json_Linq_JObjectWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Newtonsoft.Json.Linq.JObject), typeof(Newtonsoft.Json.Linq.JContainer));
		L.RegFunction("Properties", Properties);
		L.RegFunction("Property", Property);
		L.RegFunction("PropertyValues", PropertyValues);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("set_Item", set_Item);
		L.RegFunction("Load", Load);
		L.RegFunction("Parse", Parse);
		L.RegFunction("FromObject", FromObject);
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("Add", Add);
		L.RegFunction("Remove", Remove);
		L.RegFunction("TryGetValue", TryGetValue);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("New", _CreateNewtonsoft_Json_Linq_JObject);
		L.RegVar("this", _this, null);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("Type", get_Type, null);
		L.RegVar("PropertyChanged", get_PropertyChanged, set_PropertyChanged);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNewtonsoft_Json_Linq_JObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Newtonsoft.Json.Linq.JObject obj = new Newtonsoft.Json.Linq.JObject();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject)))
			{
				Newtonsoft.Json.Linq.JObject arg0 = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
				Newtonsoft.Json.Linq.JObject obj = new Newtonsoft.Json.Linq.JObject(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(object)))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Newtonsoft.Json.Linq.JObject obj = new Newtonsoft.Json.Linq.JObject(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (TypeChecker.CheckParamsType(L, typeof(object), 1, count))
			{
				object[] arg0 = ToLua.ToParamsObject(L, 1, count);
				Newtonsoft.Json.Linq.JObject obj = new Newtonsoft.Json.Linq.JObject(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Newtonsoft.Json.Linq.JObject.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(string)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(object)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: Newtonsoft.Json.Linq.JObject.this");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _set_this(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(string), typeof(Newtonsoft.Json.Linq.JToken)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(object), typeof(Newtonsoft.Json.Linq.JToken)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to operator method: Newtonsoft.Json.Linq.JObject.this");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, _set_this);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Properties(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
			System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JProperty> o = obj.Properties();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Property(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
			string arg0 = ToLua.CheckString(L, 2);
			Newtonsoft.Json.Linq.JProperty o = obj.Property(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PropertyValues(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
			Newtonsoft.Json.Linq.JEnumerable<Newtonsoft.Json.Linq.JToken> o = obj.PropertyValues();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(string)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(object)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				Newtonsoft.Json.Linq.JToken o = obj[arg0];
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.get_Item");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Item(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(string), typeof(Newtonsoft.Json.Linq.JToken)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(object), typeof(Newtonsoft.Json.Linq.JToken)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 3);
				obj[arg0] = arg1;
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.set_Item");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.JsonReader));
			Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Load(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.Parse(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FromObject(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(object)))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.FromObject(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(object), typeof(Newtonsoft.Json.JsonSerializer)))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Newtonsoft.Json.JsonSerializer arg1 = (Newtonsoft.Json.JsonSerializer)ToLua.ToObject(L, 2);
				Newtonsoft.Json.Linq.JObject o = Newtonsoft.Json.Linq.JObject.FromObject(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.FromObject");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
			Newtonsoft.Json.JsonWriter arg0 = (Newtonsoft.Json.JsonWriter)ToLua.CheckObject(L, 2, typeof(Newtonsoft.Json.JsonWriter));
			Newtonsoft.Json.JsonConverter[] arg1 = ToLua.CheckParamsObject<Newtonsoft.Json.JsonConverter>(L, 3, count - 2);
			obj.WriteTo(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(object)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.Add(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(string), typeof(Newtonsoft.Json.Linq.JToken)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				Newtonsoft.Json.Linq.JToken arg1 = (Newtonsoft.Json.Linq.JToken)ToLua.ToObject(L, 3);
				obj.Add(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.Add");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Remove(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				obj.Remove();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(Newtonsoft.Json.Linq.JObject), typeof(string)))
			{
				Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.Remove(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JObject.Remove");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryGetValue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
			string arg0 = ToLua.CheckString(L, 2);
			Newtonsoft.Json.Linq.JToken arg1 = null;
			bool o = obj.TryGetValue(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushObject(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
			System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,Newtonsoft.Json.Linq.JToken>> o = obj.GetEnumerator();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)o;
			Newtonsoft.Json.Linq.JTokenType ret = obj.Type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PropertyChanged(IntPtr L)
	{
		ToLua.Push(L, new EventObject("Newtonsoft.Json.Linq.JObject.PropertyChanged"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PropertyChanged(IntPtr L)
	{
		try
		{
			Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)ToLua.CheckObject(L, 1, typeof(Newtonsoft.Json.Linq.JObject));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'Newtonsoft.Json.Linq.JObject.PropertyChanged' can only appear on the left hand side of += or -= when used outside of the type 'Newtonsoft.Json.Linq.JObject'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.ComponentModel.PropertyChangedEventHandler ev = (System.ComponentModel.PropertyChangedEventHandler)DelegateFactory.CreateDelegate(typeof(System.ComponentModel.PropertyChangedEventHandler), arg0.func);
				obj.PropertyChanged += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.ComponentModel.PropertyChangedEventHandler ev = (System.ComponentModel.PropertyChangedEventHandler)LuaMisc.GetEventHandler(obj, typeof(Newtonsoft.Json.Linq.JObject), "PropertyChanged");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (System.ComponentModel.PropertyChangedEventHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.PropertyChanged -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

