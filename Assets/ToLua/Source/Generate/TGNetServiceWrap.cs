//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TGNetServiceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TGNetService), typeof(System.Object));
		L.RegFunction("IsRunning", IsRunning);
		L.RegFunction("GetInstance", GetInstance);
		L.RegFunction("NewInstance", NewInstance);
		L.RegFunction("Start", Start);
		L.RegFunction("Stop", Stop);
		L.RegFunction("GetServerTime", GetServerTime);
		L.RegFunction("GetServerPassedTime", GetServerPassedTime);
		L.RegFunction("GetServerLatency", GetServerLatency);
		L.RegFunction("AddEventHandler", AddEventHandler);
		L.RegFunction("RemoveEventHander", RemoveEventHander);
		L.RegFunction("SendRequest", SendRequest);
		L.RegFunction("NetEventDispatcher", NetEventDispatcher);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegConstant("ReceiveTimeout", 90000);
		L.RegConstant("PingRate", 1000);
		L.RegVar("DebugLevel", get_DebugLevel, set_DebugLevel);
		L.RegVar("serverIp", get_serverIp, set_serverIp);
		L.RegVar("serverPort", get_serverPort, set_serverPort);
		L.RegVar("pool", get_pool, set_pool);
		L.RegFunction("NetEventHanlder", TGNetService_NetEventHanlder);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsRunning(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TGNetService obj = (TGNetService)ToLua.CheckObject(L, 1, typeof(TGNetService));
			bool o = obj.IsRunning();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			TGNetService o = TGNetService.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NewInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			TGNetService o = TGNetService.NewInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TGNetService obj = (TGNetService)ToLua.CheckObject(L, 1, typeof(TGNetService));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.Start(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TGNetService obj = (TGNetService)ToLua.CheckObject(L, 1, typeof(TGNetService));
			obj.Stop();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.DateTime o = TGNetService.GetServerTime();
			ToLua.PushValue(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerPassedTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.DateTime arg0 = (System.DateTime)ToLua.CheckObject(L, 1, typeof(System.DateTime));
			float o = TGNetService.GetServerPassedTime(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetServerLatency(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = TGNetService.GetServerLatency();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEventHandler(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			TGNetService obj = (TGNetService)ToLua.CheckObject(L, 1, typeof(TGNetService));
			string arg0 = ToLua.CheckString(L, 2);
			TGNetService.NetEventHanlder arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (TGNetService.NetEventHanlder)ToLua.CheckObject(L, 3, typeof(TGNetService.NetEventHanlder));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(TGNetService.NetEventHanlder), func) as TGNetService.NetEventHanlder;
			}

			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.AddEventHandler(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEventHander(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TGNetService obj = (TGNetService)ToLua.CheckObject(L, 1, typeof(TGNetService));
			string arg0 = ToLua.CheckString(L, 2);
			TGNetService.NetEventHanlder arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (TGNetService.NetEventHanlder)ToLua.CheckObject(L, 3, typeof(TGNetService.NetEventHanlder));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(TGNetService.NetEventHanlder), func) as TGNetService.NetEventHanlder;
			}

			obj.RemoveEventHander(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendRequest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TGNetService obj = (TGNetService)ToLua.CheckObject(L, 1, typeof(TGNetService));
			TGNetService.NetRequest arg0 = (TGNetService.NetRequest)ToLua.CheckObject(L, 2, typeof(TGNetService.NetRequest));
			obj.SendRequest(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NetEventDispatcher(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TGNetService obj = (TGNetService)ToLua.CheckObject(L, 1, typeof(TGNetService));
			System.Collections.IEnumerator o = obj.NetEventDispatcher();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DebugLevel(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, TGNetService.DebugLevel);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverIp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService obj = (TGNetService)o;
			string ret = obj.serverIp;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverIp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_serverPort(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService obj = (TGNetService)o;
			int ret = obj.serverPort;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverPort on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pool(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService obj = (TGNetService)o;
			UTGNetServicePool ret = obj.pool;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pool on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DebugLevel(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			TGNetService.DebugLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_serverIp(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService obj = (TGNetService)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.serverIp = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverIp on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_serverPort(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService obj = (TGNetService)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.serverPort = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index serverPort on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pool(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			TGNetService obj = (TGNetService)o;
			UTGNetServicePool arg0 = (UTGNetServicePool)ToLua.CheckObject(L, 2, typeof(UTGNetServicePool));
			obj.pool = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index pool on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TGNetService_NetEventHanlder(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(TGNetService.NetEventHanlder), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}



	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TGNetService_NetEventHanlder_Self(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			LuaTable self = ToLua.CheckLuaTable(L, 2);
			Delegate arg1 = DelegateFactory.CreateDelegate_Self(typeof(TGNetService.NetEventHanlder), func, self);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

